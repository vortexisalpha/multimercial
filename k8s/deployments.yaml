apiVersion: apps/v1
kind: Deployment
metadata:
  name: video-ad-placement-app
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: video-ad-placement
    app.kubernetes.io/component: app
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: video-ad-placement
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: video-ad-placement
        app.kubernetes.io/component: app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      nodeSelector:
        accelerator: nvidia-tesla-gpu  # GPU node selector
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
      initContainers:
        - name: model-downloader
          image: video-ad-placement:latest
          command: ["python3", "/app/docker/scripts/download_models.py"]
          env:
            - name: MODEL_CACHE_DIR
              value: "/models"
          volumeMounts:
            - name: models-cache
              mountPath: /models
          resources:
            limits:
              memory: 2Gi
              cpu: 1000m
            requests:
              memory: 1Gi
              cpu: 500m
      containers:
        - name: app
          image: video-ad-placement:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: video-ad-placement-config
            - secretRef:
                name: video-ad-placement-secrets
          env:
            - name: REDIS_URL
              value: "redis://redis:6379/0"
            - name: DATABASE_URL
              value: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres:5432/video_ad_placement"
            - name: CELERY_BROKER_URL
              value: "redis://redis:6379/0"
            - name: CELERY_RESULT_BACKEND
              value: "redis://redis:6379/1"
          volumeMounts:
            - name: models-cache
              mountPath: /models
              readOnly: true
            - name: video-data
              mountPath: /data
            - name: tmp-processing
              mountPath: /tmp/video_processing
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 2
          resources:
            limits:
              memory: 16Gi
              cpu: 4000m
              nvidia.com/gpu: 1
            requests:
              memory: 8Gi
              cpu: 2000m
              nvidia.com/gpu: 1
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: models-cache
          persistentVolumeClaim:
            claimName: models-cache-pvc
        - name: video-data
          persistentVolumeClaim:
            claimName: video-data-pvc
        - name: tmp-processing
          emptyDir:
            sizeLimit: 10Gi
      serviceAccountName: video-ad-placement
      securityContext:
        fsGroup: 1000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: video-ad-placement-worker
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: video-ad-placement
    app.kubernetes.io/component: worker
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: video-ad-placement
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: video-ad-placement
        app.kubernetes.io/component: worker
    spec:
      nodeSelector:
        accelerator: nvidia-tesla-gpu  # GPU node selector
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
      containers:
        - name: worker
          image: video-ad-placement:latest
          imagePullPolicy: IfNotPresent
          command: ["celery", "worker", "-A", "video_ad_placement.worker.celery_app"]
          args: ["--loglevel=info", "--concurrency=2", "--pool=prefork"]
          envFrom:
            - configMapRef:
                name: video-ad-placement-config
            - secretRef:
                name: video-ad-placement-secrets
          env:
            - name: WORKER_TYPE
              value: "video_processor"
            - name: REDIS_URL
              value: "redis://redis:6379/0"
            - name: DATABASE_URL
              value: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres:5432/video_ad_placement"
            - name: CELERY_BROKER_URL
              value: "redis://redis:6379/0"
            - name: CELERY_RESULT_BACKEND
              value: "redis://redis:6379/1"
          volumeMounts:
            - name: models-cache
              mountPath: /models
              readOnly: true
            - name: video-data
              mountPath: /data
            - name: tmp-processing
              mountPath: /tmp/video_processing
          livenessProbe:
            exec:
              command:
                - celery
                - inspect
                - ping
                - -A
                - video_ad_placement.worker.celery_app
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          resources:
            limits:
              memory: 12Gi
              cpu: 3000m
              nvidia.com/gpu: 1
            requests:
              memory: 6Gi
              cpu: 1500m
              nvidia.com/gpu: 1
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: models-cache
          persistentVolumeClaim:
            claimName: models-cache-pvc
        - name: video-data
          persistentVolumeClaim:
            claimName: video-data-pvc
        - name: tmp-processing
          emptyDir:
            sizeLimit: 10Gi
      serviceAccountName: video-ad-placement
      securityContext:
        fsGroup: 1000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          envFrom:
            - secretRef:
                name: postgres-secrets
          env:
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          resources:
            limits:
              memory: 4Gi
              cpu: 2000m
            requests:
              memory: 2Gi
              cpu: 1000m
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 999
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
      securityContext:
        fsGroup: 999

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: redis
          command:
            - redis-server
            - /etc/redis/redis.conf
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis
            - name: redis-data
              mountPath: /data
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          resources:
            limits:
              memory: 2Gi
              cpu: 1000m
            requests:
              memory: 1Gi
              cpu: 500m
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 999
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc
      securityContext:
        fsGroup: 999

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
              name: prometheus
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
            - '--storage.tsdb.retention.time=30d'
            - '--web.enable-lifecycle'
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          resources:
            limits:
              memory: 2Gi
              cpu: 1000m
            requests:
              memory: 1Gi
              cpu: 500m
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data-pvc
      serviceAccountName: prometheus

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: monitoring
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
              name: grafana
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: monitoring-secrets
                  key: GRAFANA_ADMIN_PASSWORD
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          resources:
            limits:
              memory: 1Gi
              cpu: 500m
            requests:
              memory: 512Mi
              cpu: 250m
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 472
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data-pvc
      securityContext:
        fsGroup: 472

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/component: proxy
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
              name: http
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          resources:
            limits:
              memory: 512Mi
              cpu: 500m
            requests:
              memory: 256Mi
              cpu: 250m
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 101
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
      securityContext:
        fsGroup: 101 