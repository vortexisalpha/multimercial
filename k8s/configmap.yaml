apiVersion: v1
kind: ConfigMap
metadata:
  name: video-ad-placement-config
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: video-ad-placement
    app.kubernetes.io/component: config
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  MODEL_CACHE_DIR: "/models"
  DATA_DIR: "/data"
  CACHE_DIR: "/cache"
  TMP_DIR: "/tmp/video_processing"
  PRELOAD_MODELS: "true"
  RUN_MIGRATIONS: "true"
  GUNICORN_WORKERS: "2"
  GUNICORN_TIMEOUT: "300"
  CELERY_CONCURRENCY: "2"
  CELERY_MAX_MEMORY_PER_CHILD: "4000000"
  CELERY_PREFETCH_MULTIPLIER: "1"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: config
data:
  redis.conf: |
    # Redis configuration for video ad placement system
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    tcp-keepalive 300
    timeout 0
    tcp-backlog 511
    databases 16
    # Logging
    loglevel notice
    # Security
    protected-mode yes
    # Performance
    lazyfree-lazy-eviction yes
    lazyfree-lazy-expire yes
    lazyfree-lazy-server-del yes

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types
            application/atom+xml
            application/javascript
            application/json
            application/ld+json
            application/manifest+json
            application/rss+xml
            application/vnd.geo+json
            application/vnd.ms-fontobject
            application/x-font-ttf
            application/x-web-app-manifest+json
            application/xhtml+xml
            application/xml
            font/opentype
            image/bmp
            image/svg+xml
            image/x-icon
            text/cache-manifest
            text/css
            text/plain
            text/vcard
            text/vnd.rim.location.xloc
            text/vtt
            text/x-component
            text/x-cross-domain-policy;

        # Upstream servers
        upstream app_servers {
            least_conn;
            server video-ad-placement-app:8000 max_fails=3 fail_timeout=30s;
        }

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

        server {
            listen 80;
            server_name _;

            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";

            # API endpoints
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://app_servers;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;
            }

            # Health check
            location /health {
                proxy_pass http://app_servers;
                proxy_set_header Host $host;
            }

            # Static files (if any)
            location /static/ {
                alias /app/static/;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # Monitoring endpoints
            location /metrics {
                proxy_pass http://app_servers;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: video-ad-placement
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files: []

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'video-ad-placement-app'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - video-ad-placement
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: video-ad-placement-app
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

      - job_name: 'redis'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - video-ad-placement
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: redis

      - job_name: 'postgres'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - video-ad-placement
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: postgres 